# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: message.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncIterator, Dict

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


@dataclass(eq=False, repr=False)
class MessageRequest(betterproto.Message):
    request_id: str = betterproto.string_field(1)
    count: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class MessageResponse(betterproto.Message):
    request_id: str = betterproto.string_field(1)
    response_id: str = betterproto.string_field(2)
    error_code: int = betterproto.int32_field(3)
    index: int = betterproto.int64_field(4)
    message: str = betterproto.string_field(5)


class MessageStub(betterproto.ServiceStub):
    async def stream_message(
        self, *, request_id: str = "", count: int = 0
    ) -> AsyncIterator["MessageResponse"]:

        request = MessageRequest()
        request.request_id = request_id
        request.count = count

        async for response in self._unary_stream(
            "/message.Message/StreamMessage",
            request,
            MessageResponse,
        ):
            yield response


class MessageBase(ServiceBase):
    async def stream_message(
        self, request_id: str, count: int
    ) -> AsyncIterator["MessageResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_stream_message(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "request_id": request.request_id,
            "count": request.count,
        }

        await self._call_rpc_handler_server_stream(
            self.stream_message,
            stream,
            request_kwargs,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/message.Message/StreamMessage": grpclib.const.Handler(
                self.__rpc_stream_message,
                grpclib.const.Cardinality.UNARY_STREAM,
                MessageRequest,
                MessageResponse,
            ),
        }
